window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.get_TCEQ_header_row_number", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "get_TCEQ_header_row_number", "kind": "function", "doc": "<p>Finds the number of rows from the start of a TCEQ GeoTAMIS report that \nthe data column headers are located</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (str):\nfilepath to GeoTAMIS data to open and parse</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>int</strong>: The number of rows from the start of the TCEQ GeoTAMIS report that \nthe data column headers are located</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<p>Sample raw data report:</p>\n\n<pre><code>===============================================================================\n1.   AQS Raw Data (RD) Transaction Report, Version 1.6, 3/11/2011\n2.   Run By: TAMIS User \n...\n12.  Transaction Type,Action,State Cd,County Cd,Site ID,Parameter Cd,...\n13.  RD,I,48,255,1070,43202,01,1,008,128,20250407,00:00,55.055,,,,,,,,,,,,,,,\n...\n===============================================================================\n</code></pre>\n\n<p>If data is stored in \"filepath\":</p>\n\n<pre><code>&gt;&gt;&gt; tgp.get_TCEQ_header_row_number(filepath)\n12\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.get_delimiter", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "get_delimiter", "kind": "function", "doc": "<p>Reads the raw file header lines and finds the character string used to\ndelimit the data columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (str):\nfilepath to GeoTAMIS data to open and parse</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The character string used to\ndelimit the data columns.</li>\n</ul>\n\n<h6 id=\"examples\">Examples</h6>\n\n<p>Sample raw data report with comma delimiter:</p>\n\n<pre><code>AQS Raw Data (RD) Transaction Report, Version 1.6, 3/11/2011 \n... \nRun Date: 08/29/2025 16:58:22,  Run Time:      3.00 seconds\nFields Delimited by: ,  Action: I  Caution!  This report does not use the pipe (|) delimiter required in AQS Transaction reports.\n...\n</code></pre>\n\n<p>If data is stored in \"filepath\":</p>\n\n<pre><code>&gt;&gt;&gt; tgp.get_delimiter(filepath)\n,\n</code></pre>\n\n<p>Sample raw data report with tab delimiter:</p>\n\n<pre><code>AQS Raw Data (RD) Transaction Report, Version 1.6, 3/11/2011\n...\nRun Date: 08/29/2025 16:58:22,  Run Time:      3.00 seconds \nFields Delimited by: Tab  Action: I  Caution!  This report does not use the pipe (|) delimiter required in AQS Transaction reports.\n...\n</code></pre>\n\n<p>If data is stored in \"filepath\":</p>\n\n<pre><code>&gt;&gt;&gt; tgp.get_delimiter(filepath)\n\\t\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.polars_convert_date_and_time_columns_to_datetime", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "polars_convert_date_and_time_columns_to_datetime", "kind": "function", "doc": "<p>Create combined datetime column with tzone info from individual date and time columns in a polars dataframe</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pl.Dataframe):\nPolars dataframe with individual date and time columns to convert</li>\n<li><strong>date_column</strong> (str):\nName of column containing date information</li>\n<li><strong>date_format</strong> (str):\ndatetime format code representing the format of the date_column data</li>\n<li><strong>time_column</strong> (str):\nName of column containing time information</li>\n<li><strong>time_format</strong> (str):\ndatetime format code representing the format of the time_column data</li>\n<li><strong>tzone_in</strong> (str):\nTimezone code for date and times being read in. TCEQ TAMIS data is presented in LST.<br />\nDefault: None</li>\n<li><strong>tzone_out</strong> (str):\nTimezone code output data is converted to.<br />\nDefault: Etc/GMT+6</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pl.Dataframe</strong>: The original polars dataframe now with a new \"Datetime\" column</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>&gt;&gt;&gt; d_range = pl.datetime_range(pl.datetime(2025, 4, 7), pl.datetime(2025, 4, 21,23), eager = True, interval=\"1h\")\n&gt;&gt;&gt; df = pl.DataFrame({\"Date\": d_range.dt.date().dt.strftime(\"%Y%m%d\").cast(int), \"Time\": d_range.dt.time().dt.strftime(\"%H:%M\")})\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date     \u2506 Time  \u2502\n\u2502 ---      \u2506 ---   \u2502\n\u2502 i64      \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 20250407 \u2506 00:00 \u2502\n\u2502 20250407 \u2506 01:00 \u2502\n\u2502 20250407 \u2506 02:00 \u2502\n\u2502 20250407 \u2506 03:00 \u2502\n\u2502 20250407 \u2506 04:00 \u2502\n\u2502 \u2026        \u2506 \u2026     \u2502\n\u2502 20250421 \u2506 19:00 \u2502\n\u2502 20250421 \u2506 20:00 \u2502\n\u2502 20250421 \u2506 21:00 \u2502\n\u2502 20250421 \u2506 22:00 \u2502\n\u2502 20250421 \u2506 23:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n&gt;&gt;&gt; df2 = tgp.polars_convert_date_and_time_columns_to_datetime(df = df, \n                                                                date_column = \"Date\",\n                                                                date_format: str = \"%Y%m%d\",\n                                                                time_column: str = \"Time\",\n                                                                time_format: str = \"%H:%M\",\n                                                                tzone_in: str = \"Etc/GMT+6\", \n                                                                tzone_out: str = \"Etc/GMT+6\")\n&gt;&gt;&gt; df2\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Time     \u2506 Datetime                \u2502\n\u2502 ---        \u2506 ---      \u2506 ---                     \u2502\n\u2502 date       \u2506 time     \u2506 datetime[\u03bcs, Etc/GMT+6] \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2025-04-07 \u2506 00:00:00 \u2506 2025-04-07 00:00:00 -06 \u2502\n\u2502 2025-04-07 \u2506 03:00:00 \u2506 2025-04-07 03:00:00 -06 \u2502\n\u2502 2025-04-07 \u2506 04:00:00 \u2506 2025-04-07 04:00:00 -06 \u2502\n\u2502 2025-04-07 \u2506 05:00:00 \u2506 2025-04-07 05:00:00 -06 \u2502\n\u2502 2025-04-07 \u2506 06:00:00 \u2506 2025-04-07 06:00:00 -06 \u2502\n\u2502 \u2026          \u2506 \u2026        \u2506 \u2026                       \u2502\n\u2502 2025-04-21 \u2506 19:00:00 \u2506 2025-04-21 19:00:00 -06 \u2502\n\u2502 2025-04-21 \u2506 20:00:00 \u2506 2025-04-21 20:00:00 -06 \u2502\n\u2502 2025-04-21 \u2506 21:00:00 \u2506 2025-04-21 21:00:00 -06 \u2502\n\u2502 2025-04-21 \u2506 22:00:00 \u2506 2025-04-21 22:00:00 -06 \u2502\n\u2502 2025-04-21 \u2506 23:00:00 \u2506 2025-04-21 23:00:00 -06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n</code></pre>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Etc/GMT+6 is the timezone covering most of Texas. Stations near El-Paso will be Etc/GMT+7.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">date_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Date&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%Y%m</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_column</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Time&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">time_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;%H:%M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tzone_in</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tzone_out</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.pl_drop_col_if_all_null", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "pl_drop_col_if_all_null", "kind": "function", "doc": "<p>Drops all columns in a dataframe which have only null records. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pl.DataFrame):\ndataframe to drop columns from</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pl.Dataframe</strong>: Original dataframe with null columns removed</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>&gt;&gt;&gt; d_range = pl.datetime_range(pl.datetime(2025, 4, 7), pl.datetime(2025, 4, 21,23), eager = True, interval=\"1h\")\n&gt;&gt;&gt; a = np.arange(0, len(d_range), 1)\n&gt;&gt;&gt; df = pl.DataFrame({\"Datetime\": d_range, \"a\": a})\n&gt;&gt;&gt; df = df.with_columns(pl.lit(None).alias(\"b\"), pl.lit(None).alias(\"c\"))\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Datetime            \u2506 a   \u2506 b    \u2506 c    \u2502\n\u2502 ---                 \u2506 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 datetime[\u03bcs]        \u2506 i64 \u2506 null \u2506 null \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2025-04-07 00:00:00 \u2506 0   \u2506 null \u2506 null \u2502\n\u2502 2025-04-07 01:00:00 \u2506 1   \u2506 null \u2506 null \u2502\n\u2502 2025-04-07 02:00:00 \u2506 2   \u2506 null \u2506 null \u2502\n\u2502 2025-04-07 03:00:00 \u2506 3   \u2506 null \u2506 null \u2502\n\u2502 2025-04-07 04:00:00 \u2506 4   \u2506 null \u2506 null \u2502\n\u2502 \u2026                   \u2506 \u2026   \u2506 \u2026    \u2506 \u2026    \u2502\n\u2502 2025-04-21 19:00:00 \u2506 355 \u2506 null \u2506 null \u2502\n\u2502 2025-04-21 20:00:00 \u2506 356 \u2506 null \u2506 null \u2502\n\u2502 2025-04-21 21:00:00 \u2506 357 \u2506 null \u2506 null \u2502\n\u2502 2025-04-21 22:00:00 \u2506 358 \u2506 null \u2506 null \u2502\n\u2502 2025-04-21 23:00:00 \u2506 359 \u2506 null \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n&gt;&gt;&gt; df = tgp.pl_drop_col_if_all_null(df = df)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Datetime            \u2506 a   \u2502\n\u2502 ---                 \u2506 --- \u2502\n\u2502 datetime[\u03bcs]        \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2025-04-07 00:00:00 \u2506 0   \u2502\n\u2502 2025-04-07 01:00:00 \u2506 1   \u2502\n\u2502 2025-04-07 02:00:00 \u2506 2   \u2502\n\u2502 2025-04-07 03:00:00 \u2506 3   \u2502\n\u2502 2025-04-07 04:00:00 \u2506 4   \u2502\n\u2502 \u2026                   \u2506 \u2026   \u2502\n\u2502 2025-04-21 19:00:00 \u2506 355 \u2502\n\u2502 2025-04-21 20:00:00 \u2506 356 \u2502\n\u2502 2025-04-21 21:00:00 \u2506 357 \u2502\n\u2502 2025-04-21 22:00:00 \u2506 358 \u2502\n\u2502 2025-04-21 23:00:00 \u2506 359 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>There are sometimes many null columns after the raw data is processed. It usually occurs if a station does not\nhave equipment for measuring all of the parameters included in the data access request. \nDropping all null columns manually is usually cumbersome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.read_and_extract_tceq_data_to_df", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "read_and_extract_tceq_data_to_df", "kind": "function", "doc": "<p>Reads a TCEQ GeoTAMIS report (.txt), extracts the data,  processes the timezone info, \nand returns a polars dataframe. Data is described by parameter and unit codes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (str | Path):\nfilepath or Path (e.g. returned from pathlib.Path()) to GeoTAMIS \nreport to read and process</li>\n<li><strong>tzone_in</strong> (str):\nTimezone code for date and times being read in. TCEQ TAMIS data is presented in LST. \nDefault: None</li>\n<li><strong>tzone_out</strong> (str):\nTimezone code output data is converted to.\nDefault: ETC/GMT+6 -- the timezone covering most of Texas. Stations near El-Paso will be ETC/GMT+7.</li>\n<li><strong>**kwargs</strong> (str):\nAdditional arguments passed to tzone conversion. See <code>polars_convert_data_and_time_columns_to_datetime</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pl.Dataframe</strong>: polars dataframe in wide format containing GeoTAMIS records</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<p>Sample data from raw GeoTAMIS report:</p>\n\n<pre><code>AQS Raw Data (RD) Transaction Report, Version 1.6, 3/11/2011\nRun By: TAMIS User\nRun Date: 08/29/2025 16:58:22,  Run Time:      3.00 seconds\nFields Delimited by: ,  Action: I  Caution!  This report does not use the pipe (|) delimiter required in AQS Transaction reports.\nMeasurements reported from: 04/07/2025 00:00:00 up to but not including: 04/22/2025 00:00:00\nSample Duration Code: 1  Report in AQS Units: N\nReport only valid data: Y  Validation levels included (0,1,2,3): 3\nOnly allow AQS codes: N  Column headings included: Y\nReport Missing Measurements: N  Check for Negative Measurements: N\nComment: \nTransaction Type,Action,State Cd,County Cd,Site ID,Parameter Cd,POC,Dur Cd,Unit Cd,Meth Cd,Date,Time,Value,Null Data Cd,Col Freq,Mon Protocol ID,Qual Cd 1,Qual Cd 2,Qual Cd 3,Qual Cd 4,Qual Cd 5,Qual Cd 6,Qual Cd 7,Qual Cd 8,Qual Cd 9,Qual Cd 10,Alternate MDL,Uncertainty Value\nRD,I,48,255,1070,43202,01,1,008,128,20250407,00:00,55.055,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,03:00,44.3327,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,04:00,35.5938,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,05:00,40.8661,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,06:00,41.76815,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,07:00,36.3294,,,,,,,,,,,,,,,\n</code></pre>\n\n<p>If data is in file at \"filepath\":</p>\n\n<pre><code>&gt;&gt;&gt; df = tgp.read_and_extract_tceq_data_to_df(fpath = filepath, \n                                                tzone_in = \"Etc/GMT+6\", \n                                                tzone_out = \"Etc/GMT+6\")\n&gt;&gt;&gt; df.columns\n['Transaction Type', 'Action', 'State Cd', 'County Cd', 'Site ID', 'Parameter Cd', 'POC', 'Dur Cd', 'Unit Cd', 'Meth Cd', 'Date', 'Time', 'Value', 'Datetime']\n\n&gt;&gt;&gt; df.head(5)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Transaction \u2506 Action \u2506 State Cd \u2506 County Cd \u2506 \u2026 \u2506 Date       \u2506 Time     \u2506 Value    \u2506 Datetime    \u2502\n\u2502 Type        \u2506 ---    \u2506 ---      \u2506 ---       \u2506   \u2506 ---        \u2506 ---      \u2506 ---      \u2506 ---         \u2502\n\u2502 ---         \u2506 str    \u2506 i64      \u2506 i64       \u2506   \u2506 date       \u2506 time     \u2506 f64      \u2506 datetime[\u03bcs \u2502\n\u2502 str         \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 ,           \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 Etc/GMT+6]  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 RD          \u2506 I      \u2506 48       \u2506 255       \u2506 \u2026 \u2506 2025-04-07 \u2506 00:00:00 \u2506 55.055   \u2506 2025-04-07  \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 00:00:00    \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 -06         \u2502\n\u2502 RD          \u2506 I      \u2506 48       \u2506 255       \u2506 \u2026 \u2506 2025-04-07 \u2506 03:00:00 \u2506 44.3327  \u2506 2025-04-07  \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 03:00:00    \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 -06         \u2502\n\u2502 RD          \u2506 I      \u2506 48       \u2506 255       \u2506 \u2026 \u2506 2025-04-07 \u2506 04:00:00 \u2506 35.5938  \u2506 2025-04-07  \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 04:00:00    \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 -06         \u2502\n\u2502 RD          \u2506 I      \u2506 48       \u2506 255       \u2506 \u2026 \u2506 2025-04-07 \u2506 05:00:00 \u2506 40.8661  \u2506 2025-04-07  \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 05:00:00    \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 -06         \u2502\n\u2502 RD          \u2506 I      \u2506 48       \u2506 255       \u2506 \u2026 \u2506 2025-04-07 \u2506 06:00:00 \u2506 41.76815 \u2506 2025-04-07  \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 06:00:00    \u2502\n\u2502             \u2506        \u2506          \u2506           \u2506   \u2506            \u2506          \u2506          \u2506 -06         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>polars_convert_date_and_time_columns_to_datetime</code></p>\n\n<p>Info on time-tagging conventions from GeoTAMIS: <a href=\"https://www.tceq.texas.gov/cgi-bin/compliance/monops/agc_daily_summary.pl\">https://www.tceq.texas.gov/cgi-bin/compliance/monops/agc_daily_summary.pl</a></p>\n\n<h6 id=\"helpful-information\">Helpful information</h6>\n\n<p>GeoTAMIS reports data collected over a given time interval at the beginning of the timestep \n(e.g., data collected between 1 p.m. and 2 p.m. is reported at 1 p.m.). Data is also\nreported in local standard time (LST). Standard time does not consider daylight savings time.\nMost of Texas is in Central Standard Time (CST), except for portions of the far west of the state\nwhich is in mountain time (MT).</p>\n\n<p><strong>Central standard time tzone code:</strong> Etc/GMT+6<br />\n<strong>Mountain time tzone code:</strong> Etc/GMT+7</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">tzone_in</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Etc/GMT+6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tzone_out</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Etc/GMT+6&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.pull_ref_info", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "pull_ref_info", "kind": "function", "doc": "<p>Use pathlib.resources to pull reference file for for labeling raw GeoTAMIS data</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ref_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">ref_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">path</span> <span class=\"n\">at</span> <span class=\"mh\">0x103c77240</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.get_clean_reference_info", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "get_clean_reference_info", "kind": "function", "doc": "<p>Pulls in GeoTAMIS parameter, unit, and site codes for labeling raw GeoTAMIS data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "TCEQ_geotam_reader.src.tceq_geotam_processor.read_tceq_to_pl_dataframe", "modulename": "TCEQ_geotam_reader.src.tceq_geotam_processor", "qualname": "read_tceq_to_pl_dataframe", "kind": "function", "doc": "<p>Read GeoTAMIS raw data file and convert to a polars dataframe with human-interpretable data. Data can be saved\ndirectly to .csv or .gzip (parquet) file formats. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filepath</strong> (str | Path):\nfilepath or Path (e.g. returned from pathlib.Path()) to GeoTAMIS \nreport to read and process</li>\n<li><strong>tzone_in</strong> (str):\nTimezone code for date and times being read in. TCEQ TAMIS data is presented in LST. \nDefault: None</li>\n<li><strong>tzone_out</strong> (str):\nTimezone code output data is converted to.\nDefault: ETC/GMT+6 -- the timezone covering most of Texas. Stations near El-Paso will be ETC/GMT+7.</li>\n<li><strong>save</strong> (bool):\nWhether to save the data to a file or not. If true, the processed file is saved to the same path as the original .txt file\nwith an updated file extension (.csv or .gzip)\nDefault: False</li>\n<li><strong>saved_file_type:</strong>: Options: \"parquet\" or \"csv\"\nSave file as either csv or parquet (.gzip) file format. Parquet maintains datetime information precluding the need to\ndo any datetime conversions after reading in the data to polars or pandas later.</li>\n<li><strong>**kwargs</strong> (str):\nAdditional arguments passed to tzone conversion. See polars_convert_data_and_time_columns_to_datetime().</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pl.Dataframe</strong>: polars dataframe in wide format containing GeoTAMIS records with descriptive column names</li>\n</ul>\n\n<h6 id=\"example\">Example</h6>\n\n<pre><code>Sample data from raw GeoTAMIS report: \n\nAQS Raw Data (RD) Transaction Report, Version 1.6, 3/11/2011\nRun By: TAMIS User\nRun Date: 08/29/2025 16:58:22,  Run Time:      3.00 seconds\nFields Delimited by: ,  Action: I  Caution!  This report does not use the pipe (|) delimiter required in AQS Transaction reports.\nMeasurements reported from: 04/07/2025 00:00:00 up to but not including: 04/22/2025 00:00:00\nSample Duration Code: 1  Report in AQS Units: N\nReport only valid data: Y  Validation levels included (0,1,2,3): 3\nOnly allow AQS codes: N  Column headings included: Y\nReport Missing Measurements: N  Check for Negative Measurements: N\nComment: \nTransaction Type,Action,State Cd,County Cd,Site ID,Parameter Cd,POC,Dur Cd,Unit Cd,Meth Cd,Date,Time,Value,Null Data Cd,Col Freq,Mon Protocol ID,Qual Cd 1,Qual Cd 2,Qual Cd 3,Qual Cd 4,Qual Cd 5,Qual Cd 6,Qual Cd 7,Qual Cd 8,Qual Cd 9,Qual Cd 10,Alternate MDL,Uncertainty Value\nRD,I,48,255,1070,43202,01,1,008,128,20250407,00:00,55.055,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,03:00,44.3327,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,04:00,35.5938,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,05:00,40.8661,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,06:00,41.76815,,,,,,,,,,,,,,,\nRD,I,48,255,1070,43202,01,1,008,128,20250407,07:00,36.3294,,,,,,,,,,,,,,,\n</code></pre>\n\n<p>If data is in file at \"filepath\":</p>\n\n<pre><code>&gt;&gt;&gt; df = tgp.read_tceq_to_pl_dataframe(fpath = filepath, \n                                       tzone_in = \"Etc/GMT+6\", \n                                       tzone_out = \"Etc/GMT+6\",\n                                       save = False)\n&gt;&gt;&gt; df.columns\n['Datetime', 'Site Name', 'Site ID', 'TCEQ Ethane (ppbv)', 'TCEQ Ethylene (ppbv)', ...,'TCEQ Wind Direction - Resultant (deg)', 'TCEQ Outdoor Temperature (Deg F)']\n\n\n&gt;&gt;&gt; df.head(5)\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Datetime   \u2506 Site Name \u2506 Site ID \u2506 TCEQ      \u2506 \u2026 \u2506 TCEQ 1,2, \u2506 TCEQ Wind \u2506 TCEQ Wind \u2506 TCEQ      \u2502\n\u2502 ---        \u2506 ---       \u2506 ---     \u2506 Ethane    \u2506   \u2506 3-Trimeth \u2506 Speed -   \u2506 Direction \u2506 Outdoor   \u2502\n\u2502 datetime[\u03bc \u2506 str       \u2506 i64     \u2506 (ppbv)    \u2506   \u2506 ylbenzene \u2506 Resultant \u2506 -         \u2506 Temperatu \u2502\n\u2502 s,         \u2506           \u2506         \u2506 ---       \u2506   \u2506 (p\u2026       \u2506 (m\u2026       \u2506 Resultan\u2026 \u2506 re (Deg \u2026 \u2502\n\u2502 Etc/GMT+6] \u2506           \u2506         \u2506 f64       \u2506   \u2506 ---       \u2506 ---       \u2506 ---       \u2506 ---       \u2502\n\u2502            \u2506           \u2506         \u2506           \u2506   \u2506 f64       \u2506 f64       \u2506 f64       \u2506 f64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2025-04-07 \u2506 Karnes    \u2506 1070    \u2506 55.055    \u2506 \u2026 \u2506 0.0       \u2506 3.54543   \u2506 328.241   \u2506 52.3258   \u2502\n\u2502 00:00:00   \u2506 County    \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 -06        \u2506           \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 2025-04-07 \u2506 Karnes    \u2506 1070    \u2506 44.3327   \u2506 \u2026 \u2506 0.0       \u2506 3.42917   \u2506 345.279   \u2506 49.3633   \u2502\n\u2502 03:00:00   \u2506 County    \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 -06        \u2506           \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 2025-04-07 \u2506 Karnes    \u2506 1070    \u2506 35.5938   \u2506 \u2026 \u2506 0.0       \u2506 5.29942   \u2506 319.843   \u2506 47.1892   \u2502\n\u2502 04:00:00   \u2506 County    \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 -06        \u2506           \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 2025-04-07 \u2506 Karnes    \u2506 1070    \u2506 40.8661   \u2506 \u2026 \u2506 0.0       \u2506 5.49455   \u2506 324.205   \u2506 45.5842   \u2502\n\u2502 05:00:00   \u2506 County    \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 -06        \u2506           \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 2025-04-07 \u2506 Karnes    \u2506 1070    \u2506 41.76815  \u2506 \u2026 \u2506 0.0       \u2506 3.91333   \u2506 318.764   \u2506 45.3275   \u2502\n\u2502 06:00:00   \u2506 County    \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2502 -06        \u2506           \u2506         \u2506           \u2506   \u2506           \u2506           \u2506           \u2506           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>\n\n<h6 id=\"saving\">Saving</h6>\n\n<pre><code>&gt;&gt;&gt; df = tgp.read_tceq_to_pl_dataframe(fpath = filepath, \n                                       tzone_in = \"Etc/GMT+6\", \n                                       tzone_out = \"Etc/GMT+6\",\n                                       save = True, \n                                       saved_file_type = \"parquet\")\n\nProcessed file saved to: /path/to/filepath.gzip\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filepath</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">tzone_in</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Etc/GMT+6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">tzone_out</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Etc/GMT+6&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">saved_file_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;csv&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();